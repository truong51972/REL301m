#!/usr/bin/env python3
"""
Script thu th·∫≠p d·ªØ li·ªáu t·ª´ Spotify API
Ch·∫°y ƒë·ªôc l·∫≠p, kh√¥ng c·∫ßn web interface
"""

import os
import json
import time
from spotify_data_collector import SpotifyDataCollector
from config import Config

def main():
    print("üéµ KI·ªÇM TRA V√Ä THU TH·∫¨P D·ªÆ LI·ªÜU T·ª™ SPOTIFY")
    print("=" * 50)
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
    if os.path.exists(Config.PLAYLIST_DATA_FILE):
        try:
            with open(Config.PLAYLIST_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"‚úÖ ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu hi·ªán c√≥: {len(data)} b√†i h√°t")
                
                # Th·ªëng k√™ d·ªØ li·ªáu hi·ªán c√≥
                genres = {}
                for song in data:
                    genre = song.get('genre', 'Unknown')
                    genres[genre] = genres.get(genre, 0) + 1
                
                print("üìà Th·ªëng k√™ d·ªØ li·ªáu hi·ªán c√≥:")
                for genre, count in sorted(genres.items(), key=lambda x: x[1], reverse=True)[:10]:
                    print(f"   - {genre}: {count} b√†i h√°t")
                
                choice = input("\n‚ùì B·∫°n c√≥ mu·ªën thu th·∫≠p l·∫°i d·ªØ li·ªáu kh√¥ng? (y/N): ").lower().strip()
                if choice != 'y':
                    print("‚úÖ Gi·ªØ nguy√™n d·ªØ li·ªáu hi·ªán c√≥!")
                    return
                else:
                    print("üîÑ B·∫Øt ƒë·∫ßu thu th·∫≠p l·∫°i d·ªØ li·ªáu...")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc d·ªØ li·ªáu hi·ªán c√≥: {e}")
            print("üîÑ B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu m·ªõi...")
    else:
        print("üìä Ch∆∞a c√≥ d·ªØ li·ªáu, b·∫Øt ƒë·∫ßu thu th·∫≠p...")
    
    # Kh·ªüi t·∫°o collector
    collector = SpotifyDataCollector()
    
    # Thu th·∫≠p d·ªØ li·ªáu
    print("\nüìä ƒêang thu th·∫≠p d·ªØ li·ªáu b√†i h√°t...")
    print("   - Nh·∫°c Vi·ªát Nam")
    print("   - Nh·∫°c qu·ªëc t·∫ø")
    print("   - C√°c th·ªÉ lo·∫°i kh√°c nhau")
    print()
    
    def progress_callback(current, total, message):
        progress = (current / total) * 100
        print(f"   [{current}/{total}] {progress:.1f}% - {message}")
    
    try:
        # Thu th·∫≠p d·ªØ li·ªáu (2000 b√†i h√°t)
        songs = collector.collect_data(target_count=2000, progress_callback=progress_callback)
        
        if songs and len(songs) > 0:
            # L∆∞u d·ªØ li·ªáu
            collector.save_data(Config.PLAYLIST_DATA_FILE)
            
            print()
            print("‚úÖ THU TH·∫¨P D·ªÆ LI·ªÜU TH√ÄNH C√îNG!")
            print(f"üìÅ D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u t·∫°i: {Config.PLAYLIST_DATA_FILE}")
            
            # Hi·ªÉn th·ªã th·ªëng k√™
            if os.path.exists(Config.PLAYLIST_DATA_FILE):
                with open(Config.PLAYLIST_DATA_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    print(f"üìä T·ªïng s·ªë b√†i h√°t: {len(data)}")
                    
                    # Th·ªëng k√™ theo genre
                    genres = {}
                    for song in data:
                        genre = song.get('genre', 'Unknown')
                        genres[genre] = genres.get(genre, 0) + 1
                    
                    print("üìà Th·ªëng k√™ theo th·ªÉ lo·∫°i:")
                    for genre, count in sorted(genres.items(), key=lambda x: x[1], reverse=True)[:10]:
                        print(f"   - {genre}: {count} b√†i h√°t")
            
        else:
            print()
            print("‚ùå THU TH·∫¨P D·ªÆ LI·ªÜU TH·∫§T B·∫†I!")
            print("   Vui l√≤ng ki·ªÉm tra l·∫°i Spotify API credentials")
            
    except Exception as e:
        print()
        print(f"‚ùå L·ªñI: {str(e)}")
        print("   Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† th·ª≠ l·∫°i")

if __name__ == "__main__":
    main() 